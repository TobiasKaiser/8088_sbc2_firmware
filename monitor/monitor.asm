bits 16

org 0xfe000

	mov al,0xaa
	out 0x0,al
	jmp short 0x2c
	pushfw
	push ax
	push cx
	mov cx,0x64
	dec cx
	jnz 0xc
	dec ax
	jnz 0x9
	pop cx
	pop ax
	popfw
	ret
	pushfw
	push ax
	in al,0x25
	and al,0x20
	jz 0x18
	pop ax
	out 0x20,al
	popfw
	ret
	in al,0x25
	and al,0x1
	jz 0x23
	in al,0x20
	ret
	mov ax,0xf000
	mov cs,ax
	mov al,0x1
	out 0x0,al
	mov ax,0x7000
	mov ss,ax
	mov ds,ax
	mov al,0x2
	out 0x0,al
	mov sp,0xffff
	mov al,0x3
	out 0x0,al
	in al,0x25
	and al,0x40
	jz 0x47
	mov al,0x4
	out 0x0,al
	mov al,0x7
	out 0x22,al
	mov al,0x80
	out 0x23,al
	mov ax,0x18
	out 0x20,ax
	mov al,0x3
	out 0x23,al
	mov al,0x1
	out 0x21,al
	mov al,0x5
	out 0x0,al
	mov ax,0x6000
	mov es,ax
	mov di,0x0
	mov al,0x6
	out 0x0,al
	mov al,0x48
	call word 0x16
	mov al,0x7
	out 0x0,al
	mov al,0x69
	call word 0x16
	mov al,0x8
	out 0x0,al
	call word 0x23
	call word 0x16
	cmp al,0x0
	jz 0x9a
	mov [es:di],al
	out 0x0,al
	inc di
	jmp short 0x88
	call word 0x23
	cmp al,0x0
	jz 0xa9
	mov sp,0xffff
	jmp word 0x6000:0x0
	mov al,0x0
	mov [es:di],al
	inc di
	out 0x0,al
	jmp short 0x88

times 0x1ff0-($-$$) db 0 

	mov AL, 0xAA
	out 0, AL
loophere: jmp loophere

times 0x2000-($-$$) db 0 